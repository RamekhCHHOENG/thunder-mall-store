[{"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/reportWebVitals.js":"1","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/Dashboard.js":"2","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/signup.js":"3","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/NavItem.js":"4","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Password.js":"5","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/index.js":"6","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/forgotPassword.js":"7","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/fire.js":"8","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home.js":"9","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/index.js":"10","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Products/index.js":"11","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home/BannerSlider.js":"12","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Notifications.js":"13","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/App.js":"14","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/Auth.js":"15","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Category/index.js":"16","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Orders/index.js":"17","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/confirmEmail.js":"18","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/PrivateRoute.js":"19","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/login.js":"20"},{"size":362,"mtime":1669034426373,"results":"21","hashOfConfig":"22"},{"size":7115,"mtime":1669104526289,"results":"23","hashOfConfig":"22"},{"size":2828,"mtime":1669117906465,"results":"24","hashOfConfig":"22"},{"size":1653,"mtime":1669034426372,"results":"25","hashOfConfig":"22"},{"size":2416,"mtime":1669117859427,"results":"26","hashOfConfig":"22"},{"size":1032,"mtime":1669034426372,"results":"27","hashOfConfig":"22"},{"size":1572,"mtime":1669116874463,"results":"28","hashOfConfig":"22"},{"size":533,"mtime":1669034426372,"results":"29","hashOfConfig":"22"},{"size":1676,"mtime":1669034426373,"results":"30","hashOfConfig":"22"},{"size":610,"mtime":1669117492665,"results":"31","hashOfConfig":"22"},{"size":18809,"mtime":1669118080203,"results":"32","hashOfConfig":"22"},{"size":1544,"mtime":1669115636479,"results":"33","hashOfConfig":"22"},{"size":3106,"mtime":1669034426375,"results":"34","hashOfConfig":"22"},{"size":1173,"mtime":1669034426372,"results":"35","hashOfConfig":"22"},{"size":690,"mtime":1669116156616,"results":"36","hashOfConfig":"22"},{"size":11729,"mtime":1669118102903,"results":"37","hashOfConfig":"22"},{"size":11625,"mtime":1669118100233,"results":"38","hashOfConfig":"22"},{"size":608,"mtime":1669116327162,"results":"39","hashOfConfig":"22"},{"size":501,"mtime":1669034426372,"results":"40","hashOfConfig":"22"},{"size":2748,"mtime":1669117446951,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"5rv9jx",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/reportWebVitals.js",[],["93","94"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/Dashboard.js",[],["95","96"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/signup.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/NavItem.js",[],["97","98"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Password.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/index.js",[],["99","100"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/forgotPassword.js",[],["101","102"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/fire.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home.js",[],["103","104"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/index.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Products/index.js",["105"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  IconButton,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContentText,\n  DialogContent,\n  DialogActions,\n  Dialog,\n} from '@material-ui/core';\n\nimport { Create, Delete, Search, Add } from '@material-ui/icons';\n// import { store } from 'react-notifications-component';\n// import { Link } from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\n\nconst columns = [\n  { id: 'code', label: 'Product Code' },\n  { id: 'name', label: 'Product Name' },\n  { id: 'quantity', label: 'Quantity(QTY)'},\n  { id: 'price', label: 'Price(US Dollar)'},\n  { id: 'category', label: 'Category(Type)' },\n  { id: 'totalSell', label: 'Total Sell(P-QTY)'},\n  { id: 'status', label: 'Status(Active/Inactive)' },\n  { id: 'picture', label: 'Picture(Cover)' },\n  { id: 'action', label: 'Action' }\n];\n\n// const rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\nconst statusItems = ['Active', 'Inactive']\nexport default function Category(productCategory) {\n  const [statusInput, setStatusInput] = useState();\n  const [inputValue, setInputValue] = useState('');\n\n  const [products, setProducts] = useState([])\n  const [categories] = useState([])\n  const [open, setOpen] = useState(false);\n  const [categoryInfo, setCategoryInfo] = useState({code: '', name: '', picture: ''});\n  const [toggleCreateDialog, setToggleCreateDialog] = useState(false);\n  // const [fileUrl, setFileUrl] = useState(null);\n  // const [loading, setLoading] = useState(null);\n  const [isEdit, setIsEdit] = useState(false);\n  const [cateCode, setCateCode] = useState(null);\n  const [imageFile, setImageFile] = useState(null);\n  const [isImageChange, setIsImageChange] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [dialogTitle, setDialogTitle] = useState(null);\n  const [buttonTitle, setButtonTitle] = useState(null);\n\n  const [code, setCode] = useState('');\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [discount, setDiscount] = useState('');\n  const [totalSell] = useState('');\n  const [price, setPrice] = useState('');\n  const [model, setModel] = useState('');\n  const [branch, setBranch] = useState('');\n  const [status, setStatus] = useState('');\n  const [picture, setPicture] = useState('');\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const db = fire.firestore();\n      const data = await db\n      .collection('products')\n      .orderBy('code')\n      .limit(rowsPerPage)\n      .startAt(page)\n      .get();  \n      const products = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setProducts(products);\n      // console.log(products, 'here is loading data');\n    } \n    fetchProducts();\n  }, [productCategory,products])\n  \n  const fetchCateogries = async () => {\n    const db = fire.firestore();\n    await db\n    .collection(\"categories\")\n    .get()\n    .then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        let {name} = doc.data();\n          categories.push(name)\n      })\n    });\n  } \n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    alert(newPage, 'start at page')\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  //delete function\n  const handleDeleteDialog = (id) => {\n    setOpen(true);\n    setCategoryInfo(id);\n    console.log(id)\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleDelete = () => {\n    try {\n      const db = fire.firestore();\n      db.collection(\"products\").doc(categoryInfo.id).delete().then(() => {\n        setOpen(false);\n      }).catch((error) => {\n        alert(error)\n      });\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const setupDialogTitle = () => {\n    if(!isEdit) {\n      setDialogTitle('Create New Productl');\n      setButtonTitle('Create');\n    } else {\n      setDialogTitle('Update Product');\n      setButtonTitle('Update');\n    }\n  }\n  //Create function \n  const handleCreateDialog = () => {\n    fetchCateogries()\n    setupDialogTitle();\n    setIsEdit(false)\n    setToggleCreateDialog(true);\n    setCode('')\n    setName('')\n    setDescription('');\n    setCategory('')\n    setQuantity('');\n    setDiscount('');\n    setPrice('');\n    setBranch('');\n    setModel('');\n    setStatus('');\n    setPicture('')\n  };\n  const handleEditDialog = (cate) => {\n    console.log(cate)\n    setupDialogTitle();\n    setIsEdit(true);\n    setToggleCreateDialog(true);\n    setCode(cate.code);\n    setName(cate.name);\n    setCateCode(cate.code);\n    setDescription(cate.description);\n    setCategory(cate.category)\n    setQuantity(cate.quantity);\n    setDiscount(cate.discount);\n    setPrice(cate.price);\n    setBranch(cate.branch);\n    setModel(cate.model);\n    setStatus(cate.status);\n    setPicture(cate.picture)\n  };\n\n  const closeCreateDialog = () => {\n    setToggleCreateDialog(false);\n  };\n  const handleCreateNewCategory = async (e) => {\n    e.preventDefault();\n    try {     \n      if (!isEdit) {\n        onRequestCreateProduct()\n      } else {\n        onRequestUpdateProduct()\n      }\n      setToggleCreateDialog(false);\n\n    } catch (err) {\n      console.log(err, 'cannot create or update')\n    }\n  }\n\n  const onRequestCreateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    const fileRef = storageRef.child(imageFile.name);\n    await fileRef.put(imageFile)\n        await fileRef.getDownloadURL().then((url) => {\n          db.collection(\"products\").doc(code).set({\n            code: code,\n            name: name,\n            description: description,\n            category: category,\n            quantity: quantity,\n            discount: discount,\n            totalSell: totalSell,\n            price: price,\n            branch: branch,\n            model: model,\n            status: status,\n            createdBy: 'Admin',\n            createdAt: '',\n            updatedBy: '',\n            updatedAt: '',\n            picture: url\n          })\n        })\n  }\n\n  const onRequestUpdateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    if(isImageChange) {\n      const fileRef = storageRef.child(imageFile.name);\n      await fileRef.put(imageFile);\n      await fileRef.getDownloadURL().then((url) => {\n        db.collection(\"products\").doc(cateCode).update({\n          code: code,\n          name: name,\n          description: description,\n          category: category,\n          quantity: quantity,\n          discount: discount,\n          totalSell: totalSell,\n          price: price,\n          branch: branch,\n          model: model,\n          status: status,\n          createdBy: 'Admin',\n          createdAt: '',\n          updatedBy: '',\n          updatedAt: '',\n          picture: url\n        })\n      })\n    } else {\n      db.collection(\"products\").doc(cateCode).update({\n        code: code,\n        name: name,\n        description: description,\n        category: category,\n        quantity: quantity,\n        discount: discount,\n        totalSell: totalSell,\n        price: price,\n        branch: branch,\n        model: model,\n        status: status,\n        createdBy: 'Admin',\n        createdAt: '',\n        updatedBy: '',\n        updatedAt: '',\n        picture: picture  \n      })\n    }\n    \n  }\n\n  const onImageChange = (e) => {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n    setImageFile(file);\n\n    reader.onloadend = function (e) {\n      setPreviewImage([reader.result]);\n    };\n  console.log(url)\n    setIsImageChange(true);\n  }\n\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        Product\n      </Typography>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6}>\n        <Grid container>\n        <Grid item xs={4}>\n          <Autocomplete\n            id=\"combo-box\"\n            options={categories}\n            getOptionLabel={(option) => option}\n            style={{marginTop: 16}}\n            renderInput={(params) => <TextField {...params} label=\"Categegory\" variant=\"outlined\" size=\"small\" />}\n          />\n        </Grid>\n        <Grid item xs={5}>\n            <TextField\n              label=\"Search...\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"status\"\n              type=\"text\"\n              style={{marginLeft: 16}}\n            />\n        </Grid>\n        <Grid item xs={2}>\n          <Button color=\"primary\" variant=\"contained\" style={{marginTop: 18, marginLeft: 32}}>\n            <Search />\n          </Button>\n        </Grid>\n            </Grid>\n        </Grid>\n        <Grid item xs={6} align=\"right\" justify=\"middle\">\n          <Button variant=\"contained\" color=\"primary\" onClick={handleCreateDialog}>\n            <Add /> Create\n          </Button>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\"}}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>{cate.code}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell>{cate.quantity}</TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={cate.price}\n                      decimalScale={2}\n                      fixedDecimalScale={true}\n                      displayType={'text'}\n                      thousandSeparator={true} prefix={'$'}\n                    />\n                  </TableCell>\n                  <TableCell>{cate.category}</TableCell>\n                  <TableCell>{cate.totalSell || 0}</TableCell>\n                  <TableCell>{cate.status}</TableCell>\n                  <TableCell style={{ width: '200px' }}>\n                    <img alt=\"icons\" src={cate.picture} style={{ width: '30px', height: '30px' }} />\n                  </TableCell>\n                  <TableCell style={{ margin: 0, padding: 0, width: \"100px\" }}>\n                    <IconButton color=\"primary\" onClick={e=>handleEditDialog(cate)}>\n                      <Create />\n                    </IconButton>\n                    <IconButton color=\"primary\" onClick={e => handleDeleteDialog(cate)}>\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={products.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Confirmation\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete this category {categoryInfo.code}?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n          <Button onClick={handleDelete} color=\"primary\" variant=\"contained\" autoFocus pending={true}>\n            Confirm\n            </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={toggleCreateDialog}\n        onClose={closeCreateDialog}\n        fullWidth\n        maxWidth=\"sm\"\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle style={{paddingBottom: 0}}>{dialogTitle}</DialogTitle>\n        <form onSubmit={handleCreateNewCategory}>\n          <DialogContent style={{paddingTop: 0}}>\n            <Grid container justify=\"space-around\" spacing={4}>\n              <Grid item xs={6}>\n                  <TextField\n                  label=\"Code\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"code\"\n                  type=\"text\" \n                  value={code}\n                  onChange={(e) => setCode(e.target.value)}\n                />\n                <TextField\n                  label=\"Name\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n                <TextField\n                  label=\"Description\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"description\"\n                  type=\"text\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                />\n              <Autocomplete\n                value={category}\n                onChange={(event, newValue) => {\n                  setCategory(newValue);\n                }}\n                inputValue={inputValue}\n                onInputChange={(event, newInputValue) => {\n                  setInputValue(newInputValue);\n                }}\n                options={categories}\n                style={{ marginTop: 16 }}\n                renderInput={(params) => <TextField {...params} label=\"Category\" variant=\"outlined\" size=\"small\"/>}\n              />\n            <input\n              style={{ display: \"none\" }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={onImageChange}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button variant=\"contained\" color=\"primary\" component=\"span\" style={{marginTop: 10}}>\n                Upload Image\n              </Button>\n            </label> <br/>\n            <img alt=\"#\" style={{width: 100, height:100, marginLeft: 20}} src={isImageChange ? previewImage : picture}/>\n              </Grid>\n              <Grid item xs={6}>\n\n            <TextField\n              label=\"Quantity\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"quantity\"\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <TextField\n              label=\"Discount\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"discouont\"\n              type=\"number\"\n              value={discount}\n              onChange={(e) => setDiscount(e.target.value)}\n            />\n            <TextField\n              label=\"Price\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"number\"\n              type=\"number\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n            <TextField\n              label=\"Branch\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"branch\"\n              type=\"text\"\n              value={branch}\n              onChange={(e) => setBranch(e.target.value)}\n            />\n            <TextField\n              label=\"Model\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"model\"\n              type=\"text\"\n              value={model}\n              onChange={(e) => setModel(e.target.value)}\n            />\n            <Autocomplete\n              value={status}\n              onChange={(event, newValue) => {\n                setStatus(newValue);\n              }}\n              inputValue={statusInput}\n              onInputChange={(event, newInputValue) => {\n                setStatusInput(newInputValue);\n              }}\n              options={statusItems}\n              style={{ marginTop: 16 }}\n              renderInput={(params) => <TextField {...params} label=\"Status\" variant=\"outlined\" size=\"small\"/>}\n            />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions> \n            <Button onClick={closeCreateDialog} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\" autoFocus>\n              {buttonTitle}\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home/BannerSlider.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Notifications.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/App.js",[],["106","107"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/Auth.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Category/index.js",["108"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Orders/index.js",["109"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Dialog,\n} from '@material-ui/core';\n\nimport { Search } from '@material-ui/icons';\nimport NumberFormat from 'react-number-format';\n\nconst columns = [\n  { id: 'code', label: 'Orders Code' },\n  { id: 'customerId', label: 'Customer ID' },\n  { id: 'name', label: 'Customer Name' },\n  { id: 'price', label: 'Phone Number' },\n  { id: 'Email', label: 'Email' },\n  { id: 'address', label: 'Delivery Address' },\n  { id: 'quantity', label: 'Total Price' },\n  { id: 'status', label: 'Status' }\n];\n\n// const rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\n// const product = [{ code: 'TBBB', name: 'Iphone', price: 233, quantity: 1, picture: 'https://firebasestorage.googleapis.com/v0/b/thunder-mall-2400e.appspot.com/o/1936732220.png?alt=media&token=ccec8cf5-08bc-4bad-85bb-69aa742ef897' }]\nexport default function Category(productCategory) {\n  const classes = useStyles();\n  \n  \n  // const [inputValue, setInputValue] = useState('');\n  const [open, setDialogOpen] = useState(false);\n  const [orders, setOrders] = useState([])\n  const [categories] = useState([])\n  const [products, setProducts] = useState([])\n  const [productDetail, setProductDetail] = useState([])\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    const fetchorders = async () => {\n      const db = fire.firestore();\n      const data = await db\n        .collection('orders')\n        .orderBy('orderId')\n        .limit(rowsPerPage)\n        .startAt(page)\n        .get();\n      const orders = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setOrders(orders);\n    }\n    fetchorders();\n    //react-hooks/exhaustive-deps\n  }, [productCategory, orders])\n  //react-hooks/exhaustive-deps\n\n  const fetchProductOrder = async (items) => {\n    const db = fire.firestore();\n    const data = await db\n      .collection(\"orders\")\n      .doc(items.orderId)\n      .collection('products')\n      .get();\n\n    const products = data.docs.map(doc => ({\n      ...doc.data()\n    }));\n    setProducts(products);\n    console.log(products, 'here is last');\n  }\n\n  const handleClose = () => {\n    setDialogOpen(false);\n    setProducts([]);\n  };\n\n  const totalAmountToPay = (items) => {\n    return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0);\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const handleShowProductOrder = (items) => {\n    fetchProductOrder(items)\n    setProductDetail(items)\n    console.log(productDetail, 'here  is product detail')\n    setDialogOpen(true)\n  }\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        List of Orders\n      </Typography>\n      <Grid container>\n        <Grid item xs={6}>\n          <Grid container>\n            <Grid item xs={4}>\n              <Autocomplete\n                id=\"combo-box\"\n                options={categories}\n                getOptionLabel={(option) => option}\n                style={{ marginTop: 16 }}\n                renderInput={(params) => <TextField {...params} label=\"Categegory\" variant=\"outlined\" size=\"small\" />}\n              />\n            </Grid>\n            <Grid item xs={5}>\n              <TextField\n                label=\"Search...\"\n                id=\"outlined-size-small\"\n                variant=\"outlined\"\n                margin=\"normal\"\n                fullWidth\n                size=\"small\"\n                name=\"status\"\n                type=\"text\"\n                style={{ marginLeft: 16 }}\n              />\n            </Grid>\n            <Grid item xs={2}>\n              <Button color=\"primary\" variant=\"contained\" style={{ marginTop: 18, marginLeft: 32 }}>\n                <Search />\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\" }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>\n                    <button\n                      style={{ color: 'blue', border: 'none', outline: 'none', background: 'none' }}\n                      onClick={(e) => handleShowProductOrder(cate)}\n                    >{cate.orderId}</button>\n                  </TableCell>\n                  <TableCell>{cate.customerId}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell>{cate.phone}</TableCell>\n                  <TableCell>{cate.email || 'No Email'}</TableCell>\n                  <TableCell>{cate.address}</TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={cate.totalToPay}\n                      decimalScale={2}\n                      fixedDecimalScale={true}\n                      displayType={'text'}\n                      thousandSeparator={true} prefix={'$'}\n                    />\n                  </TableCell>\n                  <TableCell>{cate.status}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={orders.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        fullWidth={100}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Product Ordered\"}</DialogTitle>\n        <DialogContent>\n          <Grid container>\n            <Grid item xs={6}>\n              <span>Order ID</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.orderId}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Customer ID</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.customerId}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Customer Name</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.name}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Phone Number</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.phone}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Email</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.email}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Delivery Address</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.address}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Total Price</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.totalToPay}</span>\n            </Grid>\n          </Grid>\n          <Grid container style={{marginTop: 10}}>\n            <Grid item xs={6}>\n              <span>Delivery Status</span>\n            </Grid>\n            <Grid item xs={6} align=\"right\">\n              <span>{productDetail.status}</span>\n            </Grid>\n          </Grid>\n\n            <TableContainer component={Paper} style={{marginTop: 16}}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Code</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Price</TableCell>\n                    <TableCell>Quantity</TableCell>\n                    <TableCell>Picture</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {products.map((row) => (\n                    <TableRow key={row.code}>\n                      <TableCell>{row.code}</TableCell>\n                      <TableCell>{row.name}</TableCell>\n                      <TableCell>\n                        <NumberFormat\n                          value={row.price}\n                          decimalScale={2}\n                          fixedDecimalScale={true}\n                          displayType={'text'}\n                          thousandSeparator={true} prefix={'$'}\n                        />\n                      </TableCell>\n                      <TableCell>{row.quantity}</TableCell>\n                      <TableCell>\n                        <img alt=\"icons\" src={row.picture} style={{ width: '30px', height: '30px' }} />\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  <TableRow>\n                    <TableCell rowSpan={3} />\n                    <TableCell colSpan={2}>Subtotal</TableCell>\n                    <TableCell align=\"right\">\n                      <NumberFormat\n                        value={totalAmountToPay(products)}\n                        decimalScale={2}\n                        fixedDecimalScale={true}\n                        displayType={'text'}\n                        thousandSeparator={true} prefix={'$'}\n                      />\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n        </DialogActions>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/confirmEmail.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/PrivateRoute.js",[],["110","111"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/login.js",[],["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"114","replacedBy":"120"},{"ruleId":"116","replacedBy":"121"},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","replacedBy":"123"},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","replacedBy":"125"},{"ruleId":"114","replacedBy":"126"},{"ruleId":"116","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":104,"column":6,"nodeType":"130","endLine":104,"endColumn":32,"suggestions":"131"},{"ruleId":"114","replacedBy":"132"},{"ruleId":"116","replacedBy":"133"},{"ruleId":"128","severity":1,"message":"129","line":89,"column":6,"nodeType":"130","endLine":89,"endColumn":27,"suggestions":"134"},{"ruleId":"128","severity":1,"message":"129","line":80,"column":6,"nodeType":"130","endLine":80,"endColumn":31,"suggestions":"135"},{"ruleId":"114","replacedBy":"136"},{"ruleId":"116","replacedBy":"137"},{"ruleId":"114","replacedBy":"138"},{"ruleId":"116","replacedBy":"139"},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],["140"],["141"],["140"],["141"],["140"],["141"],["140"],["141"],["140"],["141"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.","ArrayExpression",["142"],["140"],["141"],["143"],["144"],["140"],["141"],["140"],["141"],"no-global-assign","no-unsafe-negation",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [page, productCategory, products, rowsPerPage]",{"range":"151","text":"152"},"Update the dependencies array to be: [category, categories, rowsPerPage, page]",{"range":"153","text":"154"},"Update the dependencies array to be: [productCategory, orders, rowsPerPage, page]",{"range":"155","text":"156"},[3562,3588],"[page, productCategory, products, rowsPerPage]",[2818,2839],"[category, categories, rowsPerPage, page]",[2515,2540],"[productCategory, orders, rowsPerPage, page]"]