[{"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/reportWebVitals.js":"1","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/Dashboard.js":"2","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/signup.js":"3","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/NavItem.js":"4","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Password.js":"5","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/index.js":"6","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/forgotPassword.js":"7","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/fire.js":"8","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home.js":"9","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/index.js":"10","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Products/index.js":"11","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home/BannerSlider.js":"12","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Notifications.js":"13","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/App.js":"14"},{"size":362,"mtime":1669034426373,"results":"15","hashOfConfig":"16"},{"size":7115,"mtime":1669104526289,"results":"17","hashOfConfig":"16"},{"size":2796,"mtime":1669034426375,"results":"18","hashOfConfig":"16"},{"size":1653,"mtime":1669034426372,"results":"19","hashOfConfig":"16"},{"size":2411,"mtime":1669034426375,"results":"20","hashOfConfig":"16"},{"size":1032,"mtime":1669034426372,"results":"21","hashOfConfig":"16"},{"size":1605,"mtime":1669034426375,"results":"22","hashOfConfig":"16"},{"size":533,"mtime":1669034426372,"results":"23","hashOfConfig":"16"},{"size":1676,"mtime":1669034426373,"results":"24","hashOfConfig":"16"},{"size":631,"mtime":1669034426375,"results":"25","hashOfConfig":"16"},{"size":18849,"mtime":1669034426374,"results":"26","hashOfConfig":"16"},{"size":1538,"mtime":1669034426373,"results":"27","hashOfConfig":"16"},{"size":3106,"mtime":1669034426375,"results":"28","hashOfConfig":"16"},{"size":1173,"mtime":1669034426372,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5rv9jx",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/reportWebVitals.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/Dashboard.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/signup.js",["64","65"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/components/NavItem.js",[],["66","67"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Password.js",["68","69"],"import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  TextField,\n  makeStyles\n} from '@material-ui/core';\nimport fire from '../../fire'\n\nconst useStyles = makeStyles(({\n  root: {}\n}));\n\nconst Password = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const [values, setValues] = useState({\n    password: '',\n    confirm: ''\n  });\n\n  const handleChange = (event) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n  \n  const handleUpdatePassword = useCallback(\n    async event => {\n      event.preventDefault();\n      console.log(values.confirm, 'here is confirm password')\n      try {\n        var user = fire.auth().currentUser;\n        var credential = fire.auth.Aut.credential('gskqpuoqfjrneagfsk@wqcefp.com', '121212')\n\n        await user.reauthenticateWithCredential(credential)\n        .then(() => {\n          user.updatePassword(values.confirm)\n            .then(() => {\n              alert('password update success')\n            })\n        })\n    } catch (error) {\n      alert(error);\n    }\n    }\n  );\n\n  return (\n    <form\n      className={clsx(classes.root, className)}\n      {...rest}\n      onSubmit={handleUpdatePassword}\n    >\n      <Card>\n        <CardHeader\n          subheader=\"Update password\"\n          title=\"Password\"\n        />\n        <Divider />\n        <CardContent>\n          <TextField\n            fullWidth\n            label=\"Password\"\n            margin=\"normal\"\n            name=\"password\"\n            onChange={handleChange}\n            type=\"password\"\n            value={values.password}\n            variant=\"outlined\"\n          />\n          <TextField\n            fullWidth\n            label=\"Confirm password\"\n            margin=\"normal\"\n            name=\"confirm\"\n            onChange={handleChange}\n            type=\"password\"\n            value={values.confirm}\n            variant=\"outlined\"\n          />\n        </CardContent>\n        <Divider />\n        <Box\n          display=\"flex\"\n          justifyContent=\"flex-end\"\n          p={2}\n        >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            Update\n          </Button>\n        </Box>\n      </Card>\n    </form>\n  );\n};\n\n\nexport default Password;","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/index.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/utility/forgotPassword.js",["70","71","72"],"\nimport React, { useCallback, useContext } from \"react\";\nimport { withRouter, Redirect } from \"react-router\";\nimport { Container, Box, Button, TextField} from '@material-ui/core'\nimport fire from '../../fire'\nimport { Link } from 'react-router-dom'\n// import { AuthContext } from \"../Auth\"\n\nconst Login = ({ history }) => {\n  // const { currentUser, userData } = useContext(AuthContext);\n  const handleForgotPassword = useCallback(\n    async event => {\n      event.preventDefault();\n      const { email } = event.target.elements;\n      try {\n        await fire\n          .auth()\n          .sendPasswordResetEmail(email.value);\n      } catch (error) {\n        alert(error);\n      }\n    },\n    [history]\n  );\n  \n  // if (currentUser) {\n  //   return <Redirect to=\"/\" />;\n  // }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box mt=\"40px\">\n      <Link to=\"/login\">\n          <span>Back To Login</span>\n        </Link>\n        <form onSubmit={handleForgotPassword}>\n            <h3>Reset Password</h3>\n            <TextField\n                  label=\"Email\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  fullWidth\n                  margin=\"normal\"\n                  size=\"small\"\n                  name=\"email\"\n                  type=\"email\"\n              />\n              <Button\n                align=\"center\"\n                variant=\"contained\" \n                color=\"secondary\"\n                type=\"submit\"\n                >Reset Password\n              </Button>\n        </form>\n      </Box>\n    </Container>\n  );\n}\n\nexport default withRouter(Login);",["73","74"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/fire.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/index.js",["75"],"import React from 'react';\nimport {\n  Box,\n  Container,\n  makeStyles\n} from '@material-ui/core';\nimport Notifications from './Notifications';\nimport Password from './Password';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst SettingsView = () => {\n  const classes = useStyles();\n\n  return (\n      <Container maxWidth=\"lg\">\n        <Notifications />\n        <Box mt={3}>\n          <Password />\n        </Box>\n      </Container>\n  );\n};\n\nexport default SettingsView;","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Products/index.js",["76","77","78","79","80","81","82","83","84","85","86","87","88"],"import React, { useEffect, useState } from 'react';\nimport fire from '../../fire';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport TextField from '@material-ui/core/TextField';\nimport { Autocomplete } from '@material-ui/lab';\nimport {\n  Typography,\n  IconButton,\n  Grid,\n  Button,\n  DialogTitle,\n  DialogContentText,\n  DialogContent,\n  DialogActions,\n  Dialog,\n  Avatar\n} from '@material-ui/core';\n\nimport { Create, Delete, Search, Add } from '@material-ui/icons';\nimport { store } from 'react-notifications-component';\nimport { Link } from 'react-router-dom'\nimport NumberFormat from 'react-number-format';\n\nconst columns = [\n  { id: 'code', label: 'Product Code' },\n  { id: 'name', label: 'Product Name' },\n  { id: 'quantity', label: 'Quantity(QTY)'},\n  { id: 'price', label: 'Price(US Dollar)'},\n  { id: 'category', label: 'Category(Type)' },\n  { id: 'totalSell', label: 'Total Sell(P-QTY)'},\n  { id: 'status', label: 'Status(Active/Inactive)' },\n  { id: 'picture', label: 'Picture(Cover)' },\n  { id: 'action', label: 'Action' }\n];\n\nconst rows = [];\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n  }\n});\nconst statusItems = ['Active', 'Inactive']\nexport default function Category(productCategory) {\n  const [statusInput, setStatusInput] = useState();\n  const [inputValue, setInputValue] = useState('');\n\n  const [products, setProducts] = useState([])\n  const [categories, setCategories] = useState([])\n  const [open, setOpen] = useState(false);\n  const [categoryInfo, setCategoryInfo] = useState({code: '', name: '', picture: ''});\n  const [toggleCreateDialog, setToggleCreateDialog] = useState(false);\n  const [fileUrl, setFileUrl] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [isEdit, setIsEdit] = useState(false);\n  const [cateCode, setCateCode] = useState(null);\n  const [imageFile, setImageFile] = useState(null);\n  const [isImageChange, setIsImageChange] = useState(false);\n  const [previewImage, setPreviewImage] = useState(null);\n  const [dialogTitle, setDialogTitle] = useState(null);\n  const [buttonTitle, setButtonTitle] = useState(null);\n\n  const [code, setCode] = useState('');\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [category, setCategory] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const [discount, setDiscount] = useState('');\n  const [totalSell, setTotalSell] = useState('');\n  const [price, setPrice] = useState('');\n  const [model, setModel] = useState('');\n  const [branch, setBranch] = useState('');\n  const [status, setStatus] = useState('');\n  const [picture, setPicture] = useState('');\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      const db = fire.firestore();\n      const data = await db\n      .collection('products')\n      .orderBy('code')\n      .limit(rowsPerPage)\n      .startAt(page)\n      .get();  \n      const products = data.docs.map(doc => ({\n        ...doc.data(),\n        id: doc.id\n      }));\n      setProducts(products);\n      // console.log(products, 'here is loading data');\n    } \n    fetchProducts();\n  }, [productCategory,products])\n  \n  const fetchCateogries = async () => {\n    const db = fire.firestore();\n    const data = await db\n    .collection(\"categories\")\n    .get()\n    .then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        let {name} = doc.data();\n          categories.push(name)\n      })\n    });\n  } \n\n  const classes = useStyles();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    alert(newPage, 'start at page')\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  //delete function\n  const handleDeleteDialog = (id) => {\n    setOpen(true);\n    setCategoryInfo(id);\n    console.log(id)\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleDelete = () => {\n    try {\n      const db = fire.firestore();\n      db.collection(\"products\").doc(categoryInfo.id).delete().then(() => {\n        setOpen(false);\n      }).catch((error) => {\n        alert(error)\n      });\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const setupDialogTitle = () => {\n    if(!isEdit) {\n      setDialogTitle('Create New Productl');\n      setButtonTitle('Create');\n    } else {\n      setDialogTitle('Update Product');\n      setButtonTitle('Update');\n    }\n  }\n  //Create function \n  const handleCreateDialog = () => {\n    fetchCateogries()\n    setupDialogTitle();\n    setIsEdit(false)\n    setToggleCreateDialog(true);\n    setCode('')\n    setName('')\n    setDescription('');\n    setCategory('')\n    setQuantity('');\n    setDiscount('');\n    setPrice('');\n    setBranch('');\n    setModel('');\n    setStatus('');\n    setPicture('')\n  };\n  const handleEditDialog = (cate) => {\n    console.log(cate)\n    setupDialogTitle();\n    setIsEdit(true);\n    setToggleCreateDialog(true);\n    setCode(cate.code);\n    setName(cate.name);\n    setCateCode(cate.code);\n    setDescription(cate.description);\n    setCategory(cate.category)\n    setQuantity(cate.quantity);\n    setDiscount(cate.discount);\n    setPrice(cate.price);\n    setBranch(cate.branch);\n    setModel(cate.model);\n    setStatus(cate.status);\n    setPicture(cate.picture)\n  };\n\n  const closeCreateDialog = () => {\n    setToggleCreateDialog(false);\n  };\n  const handleCreateNewCategory = async (e) => {\n    e.preventDefault();\n    try {     \n      if (!isEdit) {\n        onRequestCreateProduct()\n      } else {\n        onRequestUpdateProduct()\n      }\n      setToggleCreateDialog(false);\n\n    } catch (err) {\n      console.log(err, 'cannot create or update')\n    }\n  }\n\n  const onRequestCreateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    const fileRef = storageRef.child(imageFile.name);\n    await fileRef.put(imageFile)\n        await fileRef.getDownloadURL().then((url) => {\n          db.collection(\"products\").doc(code).set({\n            code: code,\n            name: name,\n            description: description,\n            category: category,\n            quantity: quantity,\n            discount: discount,\n            totalSell: totalSell,\n            price: price,\n            branch: branch,\n            model: model,\n            status: status,\n            createdBy: 'Admin',\n            createdAt: '',\n            updatedBy: '',\n            updatedAt: '',\n            picture: url\n          })\n        })\n  }\n\n  const onRequestUpdateProduct = async () => {\n    const db = fire.firestore();\n    const storageRef = fire.storage().ref();\n    if(isImageChange) {\n      const fileRef = storageRef.child(imageFile.name);\n      await fileRef.put(imageFile);\n      await fileRef.getDownloadURL().then((url) => {\n        db.collection(\"products\").doc(cateCode).update({\n          code: code,\n          name: name,\n          description: description,\n          category: category,\n          quantity: quantity,\n          discount: discount,\n          totalSell: totalSell,\n          price: price,\n          branch: branch,\n          model: model,\n          status: status,\n          createdBy: 'Admin',\n          createdAt: '',\n          updatedBy: '',\n          updatedAt: '',\n          picture: url\n        })\n      })\n    } else {\n      db.collection(\"products\").doc(cateCode).update({\n        code: code,\n        name: name,\n        description: description,\n        category: category,\n        quantity: quantity,\n        discount: discount,\n        totalSell: totalSell,\n        price: price,\n        branch: branch,\n        model: model,\n        status: status,\n        createdBy: 'Admin',\n        createdAt: '',\n        updatedBy: '',\n        updatedAt: '',\n        picture: picture  \n      })\n    }\n    \n  }\n\n  const onImageChange = (e) => {\n    var file = e.target.files[0];\n    var reader = new FileReader();\n    var url = reader.readAsDataURL(file);\n    setImageFile(file);\n\n    reader.onloadend = function (e) {\n      setPreviewImage([reader.result]);\n    };\n  console.log(url)\n    setIsImageChange(true);\n  }\n\n\n  return (\n    <Paper style={{ padding: '20px' }}>\n      <Typography variant=\"h4\">\n        Product\n      </Typography>\n      <Grid container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={6}>\n        <Grid container>\n        <Grid item xs={4}>\n          <Autocomplete\n            id=\"combo-box\"\n            options={categories}\n            getOptionLabel={(option) => option}\n            style={{marginTop: 16}}\n            renderInput={(params) => <TextField {...params} label=\"Categegory\" variant=\"outlined\" size=\"small\" />}\n          />\n        </Grid>\n        <Grid item xs={5}>\n            <TextField\n              label=\"Search...\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"status\"\n              type=\"text\"\n              style={{marginLeft: 16}}\n            />\n        </Grid>\n        <Grid item xs={2}>\n          <Button color=\"primary\" variant=\"contained\" style={{marginTop: 18, marginLeft: 32}}>\n            <Search />\n          </Button>\n        </Grid>\n            </Grid>\n        </Grid>\n        <Grid item xs={6} align=\"right\" justify=\"middle\">\n          <Button variant=\"contained\" color=\"primary\" onClick={handleCreateDialog}>\n            <Add /> Create\n          </Button>\n        </Grid>\n      </Grid>\n      <TableContainer className={classes.container} style={{ maxHeight: \"70%\"}}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cate) => {\n              return (\n                <TableRow hover tabIndex={-1} key={cate.id} style={{ height: '10px' }}>\n                  <TableCell>{cate.code}</TableCell>\n                  <TableCell>{cate.name}</TableCell>\n                  <TableCell>{cate.quantity}</TableCell>\n                  <TableCell>\n                    <NumberFormat\n                      value={cate.price}\n                      decimalScale={2}\n                      fixedDecimalScale={true}\n                      displayType={'text'}\n                      thousandSeparator={true} prefix={'$'}\n                    />\n                  </TableCell>\n                  <TableCell>{cate.category}</TableCell>\n                  <TableCell>{cate.totalSell || 0}</TableCell>\n                  <TableCell>{cate.status}</TableCell>\n                  <TableCell style={{ width: '200px' }}>\n                    <img alt=\"icons\" src={cate.picture} style={{ width: '30px', height: '30px' }} />\n                  </TableCell>\n                  <TableCell style={{ margin: 0, padding: 0, width: \"100px\" }}>\n                    <IconButton color=\"primary\" onClick={e=>handleEditDialog(cate)}>\n                      <Create />\n                    </IconButton>\n                    <IconButton color=\"primary\" onClick={e => handleDeleteDialog(cate)}>\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={products.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n\n\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Confirmation\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n          Are you sure you want to delete this category {categoryInfo.code}?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n            </Button>\n          <Button onClick={handleDelete} color=\"primary\" variant=\"contained\" autoFocus pending={true}>\n            Confirm\n            </Button>\n        </DialogActions>\n      </Dialog>\n\n      <Dialog\n        open={toggleCreateDialog}\n        onClose={closeCreateDialog}\n        fullWidth\n        maxWidth=\"sm\"\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle style={{paddingBottom: 0}}>{dialogTitle}</DialogTitle>\n        <form onSubmit={handleCreateNewCategory}>\n          <DialogContent style={{paddingTop: 0}}>\n            <Grid container justify=\"space-around\" spacing={4}>\n              <Grid item xs={6}>\n                  <TextField\n                  label=\"Code\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"code\"\n                  type=\"text\" \n                  value={code}\n                  onChange={(e) => setCode(e.target.value)}\n                />\n                <TextField\n                  label=\"Name\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                />\n                <TextField\n                  label=\"Description\"\n                  id=\"outlined-size-small\"\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  size=\"small\"\n                  name=\"description\"\n                  type=\"text\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                />\n              <Autocomplete\n                value={category}\n                onChange={(event, newValue) => {\n                  setCategory(newValue);\n                }}\n                inputValue={inputValue}\n                onInputChange={(event, newInputValue) => {\n                  setInputValue(newInputValue);\n                }}\n                options={categories}\n                style={{ marginTop: 16 }}\n                renderInput={(params) => <TextField {...params} label=\"Category\" variant=\"outlined\" size=\"small\"/>}\n              />\n            <input\n              style={{ display: \"none\" }}\n              id=\"contained-button-file\"\n              type=\"file\"\n              onChange={onImageChange}\n            />\n            <label htmlFor=\"contained-button-file\">\n              <Button variant=\"contained\" color=\"primary\" component=\"span\" style={{marginTop: 10}}>\n                Upload Image\n              </Button>\n            </label> <br/>\n            <img alt=\"IMAGE\" style={{width: 100, height:100, marginLeft: 20}} src={isImageChange ? previewImage : picture}/>\n              </Grid>\n              <Grid item xs={6}>\n\n            <TextField\n              label=\"Quantity\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"quantity\"\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => setQuantity(e.target.value)}\n            />\n            <TextField\n              label=\"Discount\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"discouont\"\n              type=\"number\"\n              value={discount}\n              onChange={(e) => setDiscount(e.target.value)}\n            />\n            <TextField\n              label=\"Price\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"number\"\n              type=\"number\"\n              value={price}\n              onChange={(e) => setPrice(e.target.value)}\n            />\n            <TextField\n              label=\"Branch\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"branch\"\n              type=\"text\"\n              value={branch}\n              onChange={(e) => setBranch(e.target.value)}\n            />\n            <TextField\n              label=\"Model\"\n              id=\"outlined-size-small\"\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              size=\"small\"\n              name=\"model\"\n              type=\"text\"\n              value={model}\n              onChange={(e) => setModel(e.target.value)}\n            />\n            <Autocomplete\n              value={status}\n              onChange={(event, newValue) => {\n                setStatus(newValue);\n              }}\n              inputValue={statusInput}\n              onInputChange={(event, newInputValue) => {\n                setStatusInput(newInputValue);\n              }}\n              options={statusItems}\n              style={{ marginTop: 16 }}\n              renderInput={(params) => <TextField {...params} label=\"Status\" variant=\"outlined\" size=\"small\"/>}\n            />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions> \n            <Button onClick={closeCreateDialog} color=\"primary\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" color=\"primary\" variant=\"contained\" autoFocus>\n              {buttonTitle}\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </Paper>\n  );\n}\n","/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Home/BannerSlider.js",["89","90","91","92","93","94","95"],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/view/Settings/Notifications.js",[],"/Users/rameth/RamekhCHHOENG/thunder-mall-store/src/App.js",[],{"ruleId":"96","severity":1,"message":"97","line":14,"column":11,"nodeType":"98","messageId":"99","endLine":14,"endColumn":22},{"ruleId":"100","severity":1,"message":"101","line":33,"column":8,"nodeType":"102","endLine":33,"endColumn":17,"suggestions":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"96","severity":1,"message":"108","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":17},{"ruleId":"100","severity":1,"message":"109","line":34,"column":32,"nodeType":"98","endLine":34,"endColumn":43},{"ruleId":"96","severity":1,"message":"110","line":2,"column":30,"nodeType":"98","messageId":"99","endLine":2,"endColumn":40},{"ruleId":"96","severity":1,"message":"111","line":3,"column":22,"nodeType":"98","messageId":"99","endLine":3,"endColumn":30},{"ruleId":"100","severity":1,"message":"112","line":23,"column":5,"nodeType":"102","endLine":23,"endColumn":14,"suggestions":"113"},{"ruleId":"104","replacedBy":"114"},{"ruleId":"106","replacedBy":"115"},{"ruleId":"96","severity":1,"message":"116","line":20,"column":9,"nodeType":"98","messageId":"99","endLine":20,"endColumn":16},{"ruleId":"96","severity":1,"message":"117","line":25,"column":3,"nodeType":"98","messageId":"99","endLine":25,"endColumn":9},{"ruleId":"96","severity":1,"message":"118","line":29,"column":10,"nodeType":"98","messageId":"99","endLine":29,"endColumn":15},{"ruleId":"96","severity":1,"message":"119","line":30,"column":10,"nodeType":"98","messageId":"99","endLine":30,"endColumn":14},{"ruleId":"96","severity":1,"message":"120","line":45,"column":7,"nodeType":"98","messageId":"99","endLine":45,"endColumn":11},{"ruleId":"96","severity":1,"message":"121","line":61,"column":22,"nodeType":"98","messageId":"99","endLine":61,"endColumn":35},{"ruleId":"96","severity":1,"message":"122","line":65,"column":10,"nodeType":"98","messageId":"99","endLine":65,"endColumn":17},{"ruleId":"96","severity":1,"message":"123","line":65,"column":19,"nodeType":"98","messageId":"99","endLine":65,"endColumn":29},{"ruleId":"96","severity":1,"message":"124","line":66,"column":10,"nodeType":"98","messageId":"99","endLine":66,"endColumn":17},{"ruleId":"96","severity":1,"message":"125","line":66,"column":19,"nodeType":"98","messageId":"99","endLine":66,"endColumn":29},{"ruleId":"96","severity":1,"message":"126","line":81,"column":21,"nodeType":"98","messageId":"99","endLine":81,"endColumn":33},{"ruleId":"100","severity":1,"message":"127","line":105,"column":6,"nodeType":"102","endLine":105,"endColumn":32,"suggestions":"128"},{"ruleId":"96","severity":1,"message":"129","line":109,"column":11,"nodeType":"98","messageId":"99","endLine":109,"endColumn":15},{"ruleId":"130","severity":1,"message":"131","line":511,"column":13,"nodeType":"132","endLine":511,"endColumn":125},{"ruleId":"96","severity":1,"message":"133","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":20},{"ruleId":"96","severity":1,"message":"134","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":21},{"ruleId":"96","severity":1,"message":"135","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":13},{"ruleId":"96","severity":1,"message":"136","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":18},{"ruleId":"96","severity":1,"message":"137","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":14},{"ruleId":"96","severity":1,"message":"138","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":25},{"ruleId":"96","severity":1,"message":"139","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":26},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'userData.emailVerified'. Either include it or remove the dependency array.","ArrayExpression",["140"],"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"'PropTypes' is defined but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'useContext' is defined but never used.","'Redirect' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'history'. Either exclude it or remove the dependency array.",["143"],["141"],["142"],"'classes' is assigned a value but never used.","'Avatar' is defined but never used.","'store' is defined but never used.","'Link' is defined but never used.","'rows' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'fileUrl' is assigned a value but never used.","'setFileUrl' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setTotalSell' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.",["144"],"'data' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'makeStyles' is defined but never used.","'MobileStepper' is defined but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'Button' is defined but never used.","'KeyboardArrowLeft' is defined but never used.","'KeyboardArrowRight' is defined but never used.",{"desc":"145","fix":"146"},"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},"Update the dependencies array to be: [history, userData.emailVerified]",{"range":"151","text":"152"},"Update the dependencies array to be: []",{"range":"153","text":"154"},"Update the dependencies array to be: [page, productCategory, products, rowsPerPage]",{"range":"155","text":"156"},[971,980],"[history, userData.emailVerified]",[692,701],"[]",[3585,3611],"[page, productCategory, products, rowsPerPage]"]